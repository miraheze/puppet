global

<%
    htsets = @facts['numa']['device_to_htset'][@numa_iface]
    cpus = htsets.flatten.join(' ')
-%>
    cpu-map 1/1- <%= cpus %>

<%- if @lua_scripts -%>
<%- @lua_scripts.each do |lua_script| -%>
    lua-load <%= lua_script %>
<%- end -%>
<%- end -%>

    ssl-default-bind-curves X25519:prime256v1:secp384r1
    ssl-default-bind-options prefer-client-ciphers ssl-min-ver TLSv1.3
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    tune.ssl.cachesize <%= @tls_cachesize %>
    tune.ssl.lifetime <%= @tls_session_lifetime %>
    maxconn 200000

    tune.h2.header-table-size <%= @h2settings['header_table_size'] %>
    tune.h2.initial-window-size <%= @h2settings['initial_window_size'] %>
    tune.h2.max-concurrent-streams <%= @h2settings['max_concurrent_streams'] %>

<%- if @sticktables -%>
# Pseudo-backends used only for statistics tracking.
<%- @sticktables.each do |table| -%>
backend <%= table['name'] %>
    stick-table type <%= table['type'] %> <%= table['len'] ? "len " + table['len'].to_s : "" %> size <%= table['size'] %> <%= table['expire'] ? "expire " + table['expire'] : "" %> <%= table['store'] ? "store " + table['store'].join(',') : "" %>
<%- end -%>
<%- end -%>

listen tls
    log global
    maxconn 199000
    bind :<%= @tls_port -%> tfo ssl crt-list /etc/haproxy/crt-list.cfg<%- if @tls_ticket_keys_path -%> tls-ticket-keys <%= @tls_ticket_keys_path %><%- end %>

    bind :::<%= @tls_port -%> tfo v6only ssl crt-list /etc/haproxy/crt-list.cfg<%- if @tls_ticket_keys_path -%> tls-ticket-keys <%= @tls_ticket_keys_path %><%- end %>

    http-reuse never

    # time to wait for a complete HTTP request, It only applies to the header part of the HTTP request (unless option http-buffer-request is used)
    timeout http-request <%= @timeout['http_request'] %>s
    # set the maximum allowed time to wait for a new HTTP request to appear
    timeout http-keep-alive <%= @timeout['keep_alive'] %>s
    # set the maximum inactivity time on the client side
    timeout client <%= @timeout['client'] %>s
    # inactivity timeout on the client side for half-closed connections
    timeout client-fin <%= @timeout['client_fin'] %>s
    # connect timeout against a backend server
    timeout connect <%= @timeout['connect'] %>s
    # set the maximum inactivity time on the server side
    timeout server <%= @timeout['server'] %>s
    # timeout used after upgrading a connection (websockets) or after the first response when no keepalive/close option is specified
    timeout tunnel <%= @timeout['tunnel'] %>s

    <%- if @extended_logging -%>
    unique-id-format "%rt"
    <%- end -%>

    capture response header X-Cache-Status len 10
    capture request header Host len 255
    <%- if @extended_logging -%>
    capture request header Referer len 1024
    capture request header User-Agent len 1024
    capture request header Accept-Language len 1024
    capture request header Range len 10
    capture request header Accept len 64
    capture response header Content-Type len 128
    capture response header X-Cache len 96
    capture response header Server len 64
    <%- end -%>

    http-request del-header X-Real-IP

    acl is_cloudflare_ip src <%= @cloudflare_ips.join(' ') %>
    acl cf_ip_hdr req.hdr(CF-Connecting-IP) -m found
    http-request set-header X-Real-IP %[req.hdr(CF-Connecting-IP)] if is_cloudflare_ip cf_ip_hdr
    http-request set-header X-Real-IP %[src] if !is_cloudflare_ip

    http-request set-src hdr(CF-Connecting-IP) if is_cloudflare_ip cf_ip_hdr

    # Redirect unwanted User-Agent requests to 403
    acl is_mj12bot hdr_sub(User-Agent) -i MJ12bot
    acl is_zimit hdr_sub(User-Agent) -i +Zimit
    acl is_sqlmap hdr_sub(User-Agent) -i sqlmap
    acl is_go_http hdr_sub(User-Agent) -i Go-http-client
    acl is_anthropic hdr_sub(User-Agent) -i claudebot@anthropic.com
    acl is_amazonbot hdr_sub(User-Agent) -i Amazonbot

    http-request deny if is_mj12bot
    http-request deny if is_zimit
    http-request deny if is_sqlmap
    http-request deny if is_go_http
    http-request deny if is_anthropic
    http-request deny if is_amazonbot

<%- if @vars and @vars['tls'] -%>
<%- @vars['tls'].each do |var| -%>
<%- if var['acl'] == nil -%>
    http-<%= var['direction'] %> set-var(<%= var['name'] %>) <%= var['value'] %>
<%- end -%>
<%- end -%>
<%- end -%>

<%- if @filters -%>
<%- @filters.each do |filter| -%>
    filter bwlim-<%= filter['direction'] %> <%= filter['name'] %> key <%= filter['key'] %> table <%= filter['table'] %> limit <%= filter['size'] %>
<%- end -%>
<%- end -%>

<%- if @pre_acl_actions and @pre_acl_actions['tls'] -%>
<%- @pre_acl_actions['tls'].each do |action| -%>
    <%= action['context'] %> <%= action['verb'] %> <%= action['condition'] or "" %><%= action['comment'] ? "   # " + action['comment'] : "" %>
<%- end -%>
<%- end -%>

    acl wikitide_trust src 2602:294:0:c8::/64 2602:294:0:b13::/64 2602:294:0:b23::/64 2602:294:0:b12::/64 2602:294:0:b33::/64 2602:294:0:b39::/64 2604:2dc0:202:300::7c6 10.0.0.0/8 38.46.223.206 38.46.223.205

<%- if @acls and @acls['tls'] -%>
<%- @acls['tls'].each do |acl| -%>
    acl <%= acl['name'] %> <%= acl['criterion'] %> <%= acl['operator'] %> <%= acl['value'] %>
<%- end -%>
<%- end -%>

<%- if @vars and @vars['tls'] -%>
<%- @vars['tls'].each do |var| -%>
<%- if var['acl'] -%>
    http-<%= var['direction'] %> set-var(<%= var['name'] %>) <%= var['value'] %> if <%= var['acl'] %>
<%- end -%>
<%- end -%>
<%- end -%>

<%- if @add_headers and @add_headers['tls'] -%>
<%- @add_headers['tls'].each do |add_header| -%>
<%- if add_header['value'] -%>
    http-<%= add_header['direction'] %> set-header <%= add_header['name'] %> "<%= add_header['value'] %>"
<%- end -%>
<%- end -%>
<%- end -%>
<%- if @del_headers and @del_headers['tls'] -%>
<%- @del_headers['tls'].each do |del_header| -%>
    http-<%= del_header['direction'] %> del-header <%= del_header['name'] %> <%- if del_header['acl'] %> if <%= del_header['acl'] %> <%- end %>
<%- end -%>
<%- end -%>

<%- if @post_acl_actions and @post_acl_actions['tls'] -%>
<%- @post_acl_actions['tls'].each do |action| -%>
    <%= action['context'] %> <%= action['verb'] %> <%= action['condition'] or "" %><%= action['comment'] ? "   # " + action['comment'] : "" %>
<%- end -%>
<%- end -%>

    balance uri
    hash-type consistent

    option httpchk
    http-check send meth HEAD uri /check ver HTTP/1.1 hdr Host health.wikitide.net
    http-check expect status 200

    acl hc-host        hdr(host) -i health.wikitide.net
    acl hc-path        path_beg     /check
    use_backend healthcheck if hc-host hc-path

    option forwardfor

    <%- @cache_backends.each_pair do | name, address | -%>
    server <%= name %> <%= address %>:81 check
    <%- end -%>

backend healthcheck
    option forwardfor
    server hc_server 127.0.0.1:81 maxconn 100

<%- if @prometheus_port -%>
frontend stats
    no log
    maxconn 1000
    bind :<%= @prometheus_port %>
    bind :::<%= @prometheus_port %> v6only
    http-request use-service prometheus-exporter if { path /metrics }
    stats enable
    stats uri /stats
    stats refresh 10s
    # Explicitly avoid keep-alive to prevent Prometheus scrapers from
    # reusing indefinitelly the same TCP connection. See T343000
    http-after-response set-header Connection Close
<%- end -%>

<%- @varnish_backends.each_pair do | name, property | -%>
listen <%= name %>_backend_tls
    no log
    bind :<%= property['port'] %>
    bind :::<%= property['port'] %> v6only

    # time to wait for a complete HTTP request, It only applies to the header part of the HTTP request (unless option http-buffer-request is used)
    timeout http-request <%= @timeout['http_request'] %>s
    # set the maximum allowed time to wait for a new HTTP request to appear
    timeout http-keep-alive <%= @timeout['keep_alive'] %>s
    # set the maximum inactivity time on the client side
    timeout client <%= @timeout['client'] %>s
    # inactivity timeout on the client side for half-closed connections
    timeout client-fin <%= @timeout['client_fin'] %>s
    # connect timeout against a backend server
    timeout connect <%= @timeout['connect'] %>s
    # set the maximum inactivity time on the server side
    timeout server <%= @timeout['server'] %>s
    # timeout used after upgrading a connection (websockets) or after the first response when no keepalive/close option is specified
    timeout tunnel <%= @timeout['tunnel'] %>s

    # We don't use a healthchecker because we use varnish for this.
    server <%= name %>_backend <%= name %>.<%= property['domain'] || 'wikitide.net' %>:443 ssl check-ssl verify none

<%- end -%>

<%- if @http_redirection_port -%>
frontend http
    log global
    maxconn 2000
    bind :<%= @http_redirection_port %>
    bind :::<%= @http_redirection_port %> v6only

<%- if @extended_logging -%>
    unique-id-format "%rt"
<%- end -%>
    # Needed for logging purposes
    capture request header Host len 255
    # declare a capture slot with id 0 for X-Cache-Status
    declare capture response len 10
<%- if @extended_logging -%>
    capture request header Referer len 1024
    capture request header User-Agent len 1024
    capture request header Accept-Language len 1024
    capture request header Range len 10
    capture request header Accept len 64
    capture response header Content-Type len 128
    capture response header X-Cache len 96
    capture response header Server len 64
<%- end -%>

    http-request del-header X-Real-IP

    acl is_cloudflare_ip src <%= @cloudflare_ips.join(' ') %>
    acl cf_ip_hdr req.hdr(CF-Connecting-IP) -m found
    http-request set-header X-Real-IP %[req.hdr(CF-Connecting-IP)] if is_cloudflare_ip cf_ip_hdr
    http-request set-header X-Real-IP %[src] if !is_cloudflare_ip

    http-request set-src hdr(CF-Connecting-IP) if is_cloudflare_ip cf_ip_hdr

    # we can be rather aggresive regarding timeouts here as only impact http to https redirections
    # time to wait for a complete HTTP request, It only applies to the header part of the HTTP request (unless option http-buffer-request is used)
<%- if @redirection_timeout -%>
    timeout http-request <%= @redirection_timeout['http_request'] %>s
    # set the maximum allowed time to wait for a new HTTP request to appear
    timeout http-keep-alive <%= @redirection_timeout['keep_alive'] %>s
    # set the maximum inactivity time on the client side
    timeout client <%= @redirection_timeout['client'] %>s
    # inactivity timeout on the client side for half-closed connections
    timeout client-fin <%= @redirection_timeout['client_fin'] %>s
<%- end -%>
<%# vars -%>
<%- if @vars and @vars['http'] -%>
<%- @vars['http'].each do |var| -%>
<%- if var['acl'] == nil -%>
    http-<%= var['direction'] %> set-var(<%= var['name'] %>) <%= var['value'] %>
<%- end -%>
<%- end -%>
<%- end -%>
<%# pre_acl_actions -%>
<%- if @pre_acl_actions and @pre_acl_actions['http'] -%>
<%- @pre_acl_actions['http'].each do |action| -%>
    <%= action['context'] %> <%= action['verb'] %> <%= action['condition'] or "" %><%= action['comment'] ? "   # " + action['comment'] : "" %>
<%- end -%>
<%- end -%>
<%# acls -%>
<%- if @acls and @acls['http'] -%>
<%- @acls['http'].each do |acl| -%>
    acl <%= acl['name'] %> <%= acl['criterion'] %> <%= acl['operator'] %> <%= acl['value'] %>
<%- end -%>
<%- end -%>
<%# vars (with acls) -%>
<%- if @vars and @vars['http'] -%>
<%- @vars['http'].each do |var| -%>
<%- if var['acl'] -%>
    http-<%= var['direction'] %> set-var(<%= var['name'] %>) <%= var['value'] %> if <%= var['acl'] %>
<%- end -%>
<%- end -%>
<%- end -%>
<%# add_headers -%>
<%- if @add_headers and @add_headers['http'] -%>
<%- @add_headers['http'].each do |add_header| -%>
<%- if add_header['value'] -%>
    http-<%= add_header['direction'] %> set-header <%= add_header['name'] %> "<%= add_header['value'] %>"
<%- end -%>
<%- end -%>
<%- end -%>
<%# del_headers -%>
<%- if @del_headers and @del_headers['http'] -%>
<%- @del_headers['http'].each do |del_header| -%>
    http-<%= del_header['direction'] %> del-header <%= del_header['name'] %> <%- if del_header['acl'] %> if <%= del_header['acl'] %> <%- end %>
<%- end -%>
<%- end -%>
<%# post_acl_actions -%>
<%- if @post_acl_actions and @post_acl_actions['http'] -%>
<%- @post_acl_actions['http'].each do |action| -%>
    <%= action['context'] %> <%= action['verb'] %> <%= action['condition'] or "" %><%= action['comment'] ? "   # " + action['comment'] : "" %>
<%- end -%>
<%- end -%>

    # Provide Server header
    http-after-response set-header Server HAProxy
    # Provide X-Cache headers
    http-after-response set-header X-Cache "<%= @facts['networking']['hostname'] %> int"
    http-after-response set-header X-Cache-Status "int-tls"
    http-after-response capture hdr(X-Cache-Status) id 0
<%- if @http_disable_keepalive -%>
    # Explicitly avoid keep-alive
    http-after-response set-header Connection Close
<%- end -%>
    # METH_GET is a predefined ACL that includes GET and HEAD requests
    # http://docs.haproxy.org/2.6/configuration.html#7.4
    http-request redirect scheme https code 301 if METH_GET
    http-request deny status 403 content-type text/html file /etc/haproxy/tls-terminator-tls-plaintext-error.html
<%- end -%>
