#!/bin/bash
#
# Renews LetsEncrypt cert
#
# This script is only compatible with LetsEncrypt
# do not try to use it with any other certs.
#
# Miraheze Staff 2018
set -e
set -u

function log {
    echo "$@"
}

function usage {
    echo "Usage: $0 [-h] [-s <state>] [-t <service_type>] [-u <URL>]"
    echo "  -h      display help"
    echo "  -s      state of service like WARNING or OK"
    echo "  -t      service type like for example SOFT or HARD"
    echo "  -u      URL ie <domain>"
    exit 1
}

while getopts ":hs:t:u:" option; do
    case $option in
        h)
            usage
            ;;
        s)
            STATE="$OPTARG"
            ;;
        t)
            TYPE="$OPTARG"
            ;;
        u)
            URL="$OPTARG"
            ;;
        *)
            usage
            ;;
    esac
done

test -z ${STATE} && usage
test -z ${TYPE} && usage
test -z ${URL} && usage

case $STATE in
OK)
        # It's all good
        ;;
WARNING)
        # Is this a "soft" or a "hard" state?
        case $TYPE in
        SOFT)
            # blank message
        ;;
        HARD)
                # Lets Renew here
                git config --global core.sshCommand "ssh -i /var/lib/nagios/id_rsa -F /dev/null -o ProxyCommand='nc -6 -X connect -x bast.miraheze.org:8080 %h %p'"
                if [ ! -d /srv/ssl/ssl/ ]; then
                    cd /srv/ssl/ && git clone git@github.com:miraheze/ssl.git
                else
                    cd /srv/ssl/ssl && git reset --hard origin/master && git pull
                fi
                git -C /srv/ssl/ssl/ config user.email "noreply@miraheze.org"

                git -C /srv/ssl/ssl/ config user.name "MirahezeSSLBot"

                if [ -f "/etc/letsencrypt/live/${URL}/fullchain.pem" ]
                then
                    sudo /root/ssl-certificate -d $URL -q -r -o > /srv/ssl/ssl/certificates/$URL.crt
 
                    git -C /srv/ssl/ssl add /srv/ssl/ssl/certificates/$URL.crt

                    git -C /srv/ssl/ssl/ commit -m "Bot: Update SSL cert for ${URL}"

                    git -C /srv/ssl/ssl/ push origin master
                fi
                ;;
        esac
        ;;
UNKNOWN)
        # We can't do anything about this really
        ;;
CRITICAL)
        # If the above failed, let's not act here. CRITICAL is human intervention time
        echo "CRITICAL - FAIL SAFE"
        ;;
esac

exit 0
