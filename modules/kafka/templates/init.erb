#!/bin/sh
#
# Init file for Apache Kafka <%= @service_name.split(/-/)[1] and @service_name.split(/-/)[1].capitalize %>
#
<%- if @osfamily == 'Debian' -%>
### BEGIN INIT INFO
# Provides:          <%= @service_name %>
# Required-Start:    <%= @service_requires.join(' ') %>
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Apache Kafka is a distributed publish-subscribe messaging system
### END INIT INFO
<%- else -%>
# chkconfig: 35 85 15
# description: Apache Kafka is a distributed publish-subscribe messaging system
# pidfile: /var/run/<%= @service_name -%>.pid
<%- end -%>

NAME=<%= @service_name %>
<% @environment.sort.map do |k,v| -%>
<% unless v.to_s.strip.empty? -%>
export <%= k %>="<%= v %>"
<% end -%>
<% end -%>
PID_FILE="/var/run/$NAME.pid"
KAFKA_USER=<%= @user_name %>
<%- case @service_name when 'kafka' -%>
PGREP_PATTERN=kafka.Kafka
DAEMON="<%= @bin_dir %>/kafka-server-start.sh"
DAEMON_OPTS="<%= @config_dir %>/server.properties"
<%- when 'kafka-consumer' -%>
PGREP_PATTERN=kafka.tools.ConsoleConsumer
DAEMON="<%= @bin_dir %>/kafka-console-consumer.sh"
DAEMON_OPTS="<% @service_config.sort.each do |k,v| -%><% unless v.to_s.strip.empty? -%>--<%= k -%> '<%= v.is_a?(Array) ? v.join(',') : v %>' <% end -%><% end -%>"
<%- when 'kafka-mirror' -%>
PGREP_PATTERN=kafka.tools.MirrorMaker
DAEMON="<%= @bin_dir %>/kafka-run-class.sh"
DAEMON_OPTS="kafka.tools.MirrorMaker --consumer.config <%= @config_dir %>/consumer.properties --producer.config <%= @config_dir %>/producer.properties <% @service_config.sort.each do |k,v| -%><% unless v.to_s.strip.empty? -%>--<%= k -%> '<%= v.is_a?(Array) ? v.join(',') : v %>' <% end -%><% end -%>"
<%- when 'kafka-producer' -%>
PGREP_PATTERN=kafka.tools.ConsoleProducer
DAEMON="<%= @bin_dir %>/kafka-console-producer.sh"
DAEMON_OPTS="<% @service_config.sort.each do |k,v| -%><% unless v.to_s.strip.empty? -%>--<%= k -%> '<%= v.is_a?(Array) ? v.join(',') : v %>' <% end -%><% end -%>"
PRODUCER_INPUT="<%= @input %>"
<%- end -%>

if [ -f /etc/default/kafka ]; then
    . /etc/default/kafka
fi

start() {

  <% if @limit_nofile -%>
  ulimit -n <%= @limit_nofile %>
  <% end -%>

  <% if @limit_core -%>
  ulimit -c <%= @limit_core %>
  <% end -%>

  ulimit -s 10240

  if [ -f "$PID_FILE" ]; then
    PID=`cat "$PID_FILE"`
    if [ `ps -p "$PID" -o pid= || echo 1` -eq `ps ax | grep -i "$PGREP_PATTERN" | grep -v grep | awk '{print $1}' || echo 2` ] ; then
      echo "$PID_FILE exists, process is already running"
      exit 0
    fi
    echo "$PID_FILE exists but the process is not running. Deleting $PID_FILE and re-trying"
    rm -f -- "$PID_FILE"
    start
    return $?
  fi

  /bin/su "$KAFKA_USER" -c "KAFKA_JMX_OPTS=\"$KAFKA_JMX_OPTS\" $DAEMON $DAEMON_OPTS<%- if @service_name == 'kafka-producer' -%> $PRODUCER_INPUT<%- end -%> >/dev/null 2>&1 &"
  sleep 2
  PID=`ps ax | grep -i "$PGREP_PATTERN" | grep -v grep | awk '{print $1}'`
  if [ -z "$PID" ]; then
    echo "$NAME could not be started"
    exit 1
  fi

  echo "$PID" > "$PID_FILE";
  echo "$NAME started"
  return 0
}

stop() {
  if ! [ -f "$PID_FILE" ]; then
    echo -n "$PID_FILE does not exist"
    if PID=`ps ax | grep -i "$PGREP_PATTERN" | grep -v grep | awk '{print $1}'` ; then
      echo -n ", but process is running"
      echo "$PID" > "$PID_FILE"
    else
      echo -n ", and process is not running"
      return 1
    fi
  fi

  PID=`cat $PID_FILE`
  kill $PID;
  rm -f -- "$PID_FILE";

  # wait until the process is finished
  RETRIES=0
  MAX_RETRIES=10
  while [ ! -z `ps ax | grep -i "$PGREP_PATTERN" | grep -v grep | awk '{print $1}'` ]; do
    sleep 1
    RETRIES=$((RETRIES+1))
    if [ "$RETRIES" -ge "$MAX_RETRIES" ]; then
      echo "$NAME service: stop tried $MAX_RETRIES times but process $PID is still running"
      return 1
    fi
  done

  echo "$NAME stopped"
  return 0
}

status() {
  if ! [ -f "$PID_FILE" ]; then
    echo "$NAME stopped"
    exit 1
  fi

  PID=`cat "$PID_FILE"`
  if ! [ `ps -p "$PID" -o pid= || echo 1` -eq `ps ax | grep -i "$PGREP_PATTERN" | grep -v grep | awk '{print $1}' || echo 2` ] ; then
    echo "$NAME stopped but pid file exists"
    exit 1
  fi

  echo "$NAME running with pid $PID"
  exit 0
}

case "$1" in
  status)
    status
	;;
  start)
    echo "Starting daemon: $NAME"
    start
	;;
  stop)
    echo "Stopping daemon: $NAME"
    stop
	;;
  restart)
    echo "Restarting daemon: $NAME"
	  stop
    sleep 2
    start
	;;

  *)
	echo "Usage: "$1" {status|start|stop|restart}"
	exit 1
esac

exit 0
