#! /usr/bin/python3
import argparse
import os
import time

def run(args, start):
    loginfo = {}
    exitcodes = []
    for arg in vars(args).items():
        if arg[1] is not None and arg[1] is not False:
            loginfo[arg[0]] = arg[1]
    synced = loginfo['servers']
    del loginfo['servers']
    text = f'starting deploy of "{str(loginfo)}" to {synced}'
    if not args.nolog:
        os.system(f'/usr/local/bin/logsalmsg {text}')
    else:
        print(text)
    if args.config:
        exitcodes.append(os.system('sudo -u www-data cp -r /srv/mediawiki-staging/config/* /srv/mediawiki/config/'))
    if args.world:
        exitcodes.append(os.system('sudo -u www-data cp -r /srv/mediawiki-staging/w/* /srv/mediawiki/w/'))
    if args.files:
        files = str(args.files).split(',')
        for file in files:
            exitcodes.append(os.system(f'sudo -u www-data cp /srv/mediawiki-staging/{file} /srv/mediawiki/{file}'))
    if args.folders:
        folders = str(args.folders).split(',')
        for folder in folders:
            exitcodes.append(os.system(f'sudo -u www-data cp -r /srv/mediawiki-staging/{folder} /srv/mediawiki/{folder}'))
    if args.l10n:
        exitcodes.append(os.system('sudo -u www-data php /srv/mediawiki/w/maintenance/mergeMessageFileList.php --wiki=loginwiki --output /srv/mediawiki/config/ExtensionMessageFiles.php'))
        exitcodes.append(os.system('sudo -u www-data php /srv/mediawiki/w/maintenance/rebuildLocalisationCache.php --wiki=loginwiki'))
    if args.gitinfo:
        exitcodes.append(os.system('sudo -u www-data php /srv/mediawiki/w/extensions/MirahezeMagic/maintenance/rebuildVersionCache.php --use-staging --wiki=loginwiki'))
    if args.servers == 'skip':
        print('very good because I have not wrote the rsync client')
    elif args.servers == 'all':
        print('This would deploy everywhere')
    else:
        serverlist = str(args.servers).split(',')
        for server in serverlist:
            print(f'I will eventually deploy to {server}')
    fintext = f'finished deploy of "{str(loginfo)}" to {synced}'
    FAIL = 0
    for code in exitcodes:
        if code != 0:
            FAIL = 1
    timetaken = int(time.time() - start)
    if FAIL == 1:
        fintext = f'{fintext} - FAIL: {exitcodes}'
    else:
        fintext = f'{fintext} - SUCCESS'
    if not args.nolog:
        os.system(f'/usr/local/bin/logsalmsg {fintext} in {str(timetaken)}s')
    else:
        print(f'{fintext} in {str(timetaken)}s')

if __name__ == '__main__':
    start = time.time()
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--config', dest='config', action='store_true')
    parser.add_argument('--world', dest='world', action='store_true')
    parser.add_argument('--l10n', dest='l10n', action='store_true')
    parser.add_argument('--gitinfo', dest='gitinfo', action='store_true')
    parser.add_argument('--no-log', dest='nolog', action='store_true')
    parser.add_argument('--files', dest='files')
    parser.add_argument('--folders', dest='folders')
    parser.add_argument('--servers', dest='servers', required=True)
    run(parser.parse_args(), start)
