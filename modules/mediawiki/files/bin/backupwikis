#! /bin/bash

usage(){
        echo "Usage: /usr/local/bin/runwikibackups /srv/mediawiki/cache/<dblist>.php <start> <stop> [--automatic]"
        exit 1
}

[[ $# -eq 0 ]] && usage

dblist=$1
shift
# Shellcheck complains that it's unused... I would remove it, but I don't wanna fuck up CLI parsing yet
script=$1
shift

start_string=${1:-}
end_string=${2:-}
automatic_run=false

export HTTPS_PROXY=http://bastion.wikitide.net:8080

if [ ! -f "$dblist" ]; then
        echo "dblist does not exist!"
        usage
fi

if [[ "$dblist" == *.json ]]; then
        wikis=$(/usr/bin/jq ".combi | keys | .[]" "$dblist" | sed 's/.//;s/.$//')
elif [[ "$dblist" == *.php ]]; then
        # Load the PHP array and output the keys (wiki database names)
        wikis=$(/usr/bin/php -r "
            \$list = include '$dblist';
            if ( is_array( \$list['databases'] ?? false ) ) {
                echo implode( PHP_EOL, array_keys( \$list['databases'] ) );
            }
        ")
else
        echo "Unsupported file format. Please provide a .json or .php file."
        usage
fi

    logsalmsg "Began automatic backing up"
# Filter wikis based on start and end strings if provided
filtered_wikis=$(echo "$wikis" | awk -v start="$start_string" -v end="$end_string" '
    (start == "" || index($0, start) == 1) && (end == "" || index($0, end) > 0)
')

if [ "$automatic_run" = true ]; then
    echo "Running logsalmsg for $wiki"
    /usr/local/bin/logsalmsg "AUTOMATIC: Archival of all public wikis to Internet Archive has begun..."
fi

for wiki in $filtered_wikis; do
    # Retrieve the MediaWiki version for each wiki
    mwversion=$(/usr/local/bin/getMWVersion "$wiki")
    echo "$wiki is running MediaWiki $mwversion"

    date="$(date +'%Y%m%d')"
    echo "Date is set to $date"

    echo "Retrieving site information for $wiki..."

    # Store the wiki's sitename, URL, language, and license in environment variables
    # (in uppercase form, e.g. $SITENAME) for usage in ia.py upload
    SITEINFO=$(/usr/bin/php "/srv/mediawiki/$mwversion/maintenance/run.php" MirahezeMagic:GetSiteInfo --json --wiki "$wiki")
    SITENAME=$(echo "$SITEINFO" | jq -r .sitename)
    URL=$(echo "$SITEINFO" | jq -r .url)
    LANGUAGE=$(echo "$SITEINFO" | jq -r .language)
    LICENSE=$(echo "$SITEINFO" | jq -r .license)

    # Backup process for each wiki
   if /usr/bin/php "/srv/mediawiki/$mwversion/maintenance/run.php" dumpBackup --wiki "$wiki" --output "gzip:/opt/backups/$wiki-$date.xml.gz" --full --logs --uploads &&
       /usr/bin/php "/srv/mediawiki/$mwversion/maintenance/run.php" MirahezeMagic:SwiftDump --wiki "$wiki" --filename "$wiki-images-$date.tar.gz" &&
       /usr/bin/python3 /usr/lib/python3/dist-packages/internetarchive/cli/ia.py upload "miraheze-wiki-$wiki-$date" \
            "/opt/backups/$wiki-$date.xml.gz" "/tmp/$wiki-images-$date.tar.gz" \
            --metadata="mediatypes:texts" \
            --metadata="subject:wiki;MediaWiki;Miraheze;$SITENAME;$wiki" \
            --metadata="description:A backup of the <a href=\"$URL\">\"$SITENAME\"</a> wiki (database name: <b>$wiki</b>) on <a href=\"https://miraheze.org\">Miraheze</a>, self-generated by Miraheze itself every month to honor our <a href=\"https://meta.miraheze.org/wiki/Backups\">backups commitment.</a>" \
            --metadata="title:$SITENAME ($wiki) - $URL - Miraheze" \
            --metadata="originalurl:$URL" \
            --metadata="language:$LANGUAGE" \
            --metadata="rights:$LICENSE" \
            --metadata="scanner:MediaWiki $mwversion"
    then
        # If all commands succeeded, perform cleanup
        echo "Upload for $wiki completed!"
        echo "Deleting /opt/backups/$wiki-$date.xml.gz..."
        rm "/opt/backups/$wiki-$date.xml.gz"

        echo "Deleting /tmp/$wiki-images-$date.tar.gz..."
        rm "/tmp/$wiki-images-$date.tar.gz"

        echo "Done with $wiki!"
    else
        # If any command failed, skip cleanup and report failure
        echo "An error occurred during backup or upload for $wiki! Skipping cleanup..."
    fi
done

if [ "$automatic_run" = true ]; then
    echo "Logging beginning of automatic archival..."
    /usr/local/bin/logsalmsg "AUTOMATIC: Finished archival of all public wikis to Internet Archive"
fi
