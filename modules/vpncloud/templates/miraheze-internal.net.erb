# THIS CONFIGURATION FILE IS MANAGED BY PUPPET
# This configuration can be enabled/disabled and controlled by adding the
# network to `/etc/default/vpncloud` and starting/stopping it via
# `/etc/init.d/vpncloud start/stop` on non-systemd systems and via
# `systemctl enable/disable vpncloud@NAME` and
# `service vpncloud@NAME start/stop` on systemd systems.

# The port number on which to listen for data.
# Note: Every VPN needs a different port number.
port: 3210

# List of peers to connect to. Each peer must have port 3210 opened in 
# the firewall (see modules/role/manifests/vpncloud.pp)
peers:
  - 81.4.122.121:3210
  - 185.52.2.243:3210
  - 128.199.139.216:3210
  - 81.4.109.166:3210
  - 192.184.82.120:3210
  - 81.4.127.229:3210
  - 185.52.1.75:3210
  - 185.52.2.113:3210
  - 81.4.121.113:3210
  - 107.191.126.23:3210
  - 81.4.109.133:3210
  - 185.52.1.76:3210
  - 81.4.127.174:3210
  - 185.52.1.71:3210
  - 185.52.3.121:3210
  - 81.4.101.157:3210
  - 81.4.124.61:3210
  - 168.235.109.27:3210

# Peer timeout in seconds. The peers will exchange information periodically
# and drop peers that are silent for this period of time.
peer_timeout: 1800

keepalive: 840

# Switch table entry timeout in seconds. This parameter is only used in switch
# mode. Addresses that have not been seen for the given period of time  will
# be forgot.
dst_timeout: 300

# An optional token that identifies the network and helps to distinguish it
# from other networks.
magic: "76706e01"

# An optional shared key to encrypt the VPN data. If this option is not set,
# the traffic will be sent unencrypted.
shared_key: "<%= @shared_key %>"

# The encryption method to use ("aes256", or "chacha20"). Most current CPUs
# have special support for AES256 so this should be faster. For older
# computers lacking this support, only CHACHA20 is supported.
crypto: aes256

# Name of the virtual device. Any `%d` will be filled with a free number.
device_name: "vpncloud0"

# Set the type of network. There are two options: **tap** devices process
# Ethernet frames **tun** devices process IP packets. [default: `tap`]
device_type: tap

# The mode of the VPN. The VPN can like a router, a switch or a hub. A **hub**
# will send all data always to all peers. A **switch** will learn addresses
# from incoming data and only send data to all peers when the address is
# unknown. A **router** will send data according to known subnets of the
# peers and ignore them otherwise. The **normal** mode is switch for tap
# devices and router for tun devices. [default: `normal`]
mode: normal

# The local subnets to use. This parameter should be in the form
# `address/prefixlen` where address is an IPv4 address, an IPv6 address, or a
# MAC address. The prefix length is the number of significant front bits that
# distinguish the subnet from other subnets. Example: `10.1.1.0/24`.
# Note: Several entries can be separated by spaces.
subnets:
  - 10.0.1.0/24

# A command to setup the network interface. The command will be run (as
# parameter to `sh -c`) when the device has been created to configure it.
# The name of the allocated device will be available via the environment
# variable `IFNAME`.
ifup: "ip addr add <%= @server_ip %>/16 dev $IFNAME && ip link set dev $IFNAME mtu 1400 && ip link set $IFNAME up"

# A command to bring down the network interface. The command will be run (as
# parameter to `sh -c`) to remove any configuration from the device.
# The name of the allocated device will be available via the environment
# variable `IFNAME`.
ifdown: "ip link set $IFNAME down"

# systemd stores the PID file at /run/vpncloud-miraheze-internal.pid
# pid_file: "/var/run/vpncloud.pid"

# Change the user and/or group of the process once all the setup has been
# done and before spawning the background process. This option is only used
# when running in background.
user: "root"
group: "root"
