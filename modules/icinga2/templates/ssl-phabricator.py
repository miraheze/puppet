#!/usr/bin/env python
# Original by Riccardo Coccioli (volans) [https://raw.githubusercontent.com/wikimedia/operations-puppet/production/modules/icinga/files/raid_handler.py]
"""Icinga Event Handler for SSL checks"""

import argparse
import datetime
import logging
import subprocess
import socket
import ssl
import time
import zlib

from logging.handlers import RotatingFileHandler
from phabricator import Phabricator

SERVICE_STATES = ('OK', 'UNKNOWN', 'WARNING', 'CRITICAL')
SERVICE_STATE_TYPES = ('SOFT', 'HARD')

SKIP_STRINGS = ('timeout', 'timed out', 'connection refused', 'out of bounds')

LOG_PATH = '/var/log/icinga/ssl_handler.log'
COMMAND_FILE = '/var/lib/nagios/rw/nagios.cmd'

ACK_MESSAGE = 'SSL handler auto-ack: {}'
ICINGA_URL = ('https://icinga.miraheze.org/cgi-bin/icinga/extinfo.cgi?type=2&'
              'host={host}&service={service}')

PHABRICATOR_TASK_TITLE = "Certificate expiring on {service}"
PHABRICATOR_TASK_DESCRIPTION_PREFIX = (
    "TASK AUTO-GENERATED by Icinga SSL event handler\n\n"
    "The [[ {url} | SSL certificate ]] for domain `{service}` is expiring.\n\n"
    "Included below is the expiration date provided by a HTTP check on the domain.\n\n"
    "Please handle the request as soon as possible."
)

logger = logging.getLogger('ssl_handler')


def parse_args():
    """Parse command line arguments"""

    parser = argparse.ArgumentParser(
        description='Icinga event handler for SSL checks')
    parser.add_argument(
        '-s', dest='service_state', action='store', required=True,
        choices=SERVICE_STATES, help='Icinga service state')
    parser.add_argument(
        '-t', dest='service_state_type', action='store', required=True,
        choices=SERVICE_STATE_TYPES, help='Icinga service state type')
    parser.add_argument(
        '-a', dest='service_attempts', action='store', required=True, type=int,
        help='Icinga service retry attemp counter')
    parser.add_argument(
        '-H', dest='host_address', action='store', required=True,
        help='Hostname/address of the monitored host')
    parser.add_argument(
        '-D', dest='service_description', action='store', required=True,
        help='The Icinga service description')
    parser.add_argument(
        '-m', dest='message', action='store', required=True,
        help='The service Status information output (first line)')
    parser.add_argument(
        '-d', dest='debug', action='store_true', help='Debug level logging')

    return parser.parse_args()


def get_ssl_status(service):
    """ Get and return the SSL status of a domain.

        Arguments:
        service      -- domain of the certificate
    """
    ssl_date_fmt = r'%b %d %H:%M:%S %Y %Z'

    context = ssl.create_default_context()
    conn = context.wrap_socket(
        socket.socket(socket.AF_INET),
        server_hostname=service)
    conn.settimeout(3.0)

    conn.connect((service, 443))
    ssl_info = conn.getpeercert()
    status = datetime.datetime.strptime(ssl_info['notAfter'], ssl_date_fmt)

    logger.debug(status)
    return status


def get_phabricator_client():
    """Return a Phabricator client instance"""

    client = Phabricator(
        username = 'miraheze-icinga',
        token = '<%= @icingabot_password %>',
        host = 'https://phabricator.miraheze.org/api/'
    )

    return client


def get_phabricator_project_ids(phab_client):
    """ Return a list of Phabricator's projectPHID

        Find the project IDs of the SSL tag and add the one of
        Operations project.

        Arguments:
        phab_client -- a Phabricator client instance
    """

    projects = phab_client.project.query(names=['SSL', 'Operations'])

    logger.debug("Found PHIDs '{}' for SSL and Operations".format(
        projects.data.keys()))

    return projects.data.keys()


def open_phabricator_task(
        phab_client, project_ids, service, ssl_status, icinga_url):
    """ Open a task on Phabricator and return it

        Arguments:
        phab_client -- a Phabricator client instance
        project_ids -- the PHIDs to tag the task with
        service        -- the domain of the affected certificate
        ssl_status  -- the SSL expiry date found by a python check
        icinga_url  -- the URL of the Icinga alarm that triggered this handler
    """

    description_prefix = PHABRICATOR_TASK_DESCRIPTION_PREFIX.format(
        service=service, url=icinga_url)
    description = '{description_prefix}\n```\n{ssl_status}\n```'.format(
        description_prefix=description_prefix, ssl_status=ssl_status)

    task = phab_client.maniphest.createtask(
        title=PHABRICATOR_TASK_TITLE.format(service=service),
        projectPHIDs=project_ids, priority='75', description=description)

    logger.debug('Opened Phabricator task: {}'.format(task))
    return task


def acknowledge_nagios_alert(host, service_description, task_uri):
    """ Acknowledge the Icinga alert

        Arguments:
        host                -- the host
        service_description -- the Icinga service description
        task_uri            -- the URI of the related Phabricator task
    """

    message = (
        '[{time}] ACKNOWLEDGE_SVC_PROBLEM;{host};{service};2;1;0;'
        'nagiosadmin;{message}\n'
    ).format(time=int(time.time()), host=host, service=service_description,
             message=ACK_MESSAGE.format(task_uri))

    with open(COMMAND_FILE, 'w') as f:
        f.write(message)

    logger.debug('Acknowledged Nagios/Icinga alert: {}'.format(message))


def main():
    """Run the Icinga Event Handler for SSL checks"""

    args = parse_args()

    log_formatter = logging.Formatter(
        fmt='%(asctime)s [%(levelname)s] %(name)s::%(funcName)s: %(message)s',
        datefmt='%F %T')
    log_handler = RotatingFileHandler(
        LOG_PATH, maxBytes=5*(1024**2), backupCount=10)
    log_handler.setFormatter(log_formatter)
    logger.addHandler(log_handler)
    logger.raiseExceptions = False
    logger.setLevel(logging.INFO)

    if args.debug:
        logger.setLevel(logging.DEBUG)

    logger.debug('SSL Handler called with args: {}'.format(args))

    if args.service_state == 'OK' or args.service_state_type != 'HARD':
        logger.debug('Nothing to do, exiting')
        return

    message_lower = args.message.lower()
    for skip_string in SKIP_STRINGS:
        if skip_string in message_lower:
            logger.info(
                ("Skipping SSL Handler execution for host '{}' and "
                 "skip string '{}' detected in '{}'").format(
                    args.service_description, skip_string,
                    args.message))
            return

    ssl_status = get_ssl_status(args.service_description)
    phab_client = get_phabricator_client()
    project_ids = get_phabricator_project_ids(phab_client)

    icinga_url = ICINGA_URL.format(
        host=args.host_address, service=args.service_description)
    task = open_phabricator_task(
        phab_client, project_ids, args.service_description, ssl_status, icinga_url)

    acknowledge_nagios_alert(
        args.host_address, args.service_description, task['uri'])

    logger.info(
        ("SSL Handler executed for host '{}'. "
         "Created task ID '{}'").format(
            args.service_description, task['id']))

    logger.debug('SSL Handler completed')


if __name__ == '__main__':
    try:
        main()
    except Exception:
        logger.exception("Unable to handle SSL check alert")
